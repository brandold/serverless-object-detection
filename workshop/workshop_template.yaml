AWSTemplateFormatVersion: 2010-09-09
Description: STG309 workshop setup with VPC for Cloud9.

Parameters:
  SpecifyC9Owner:
    AllowedValues: [true, false]
    Description: Add an Owner ARN to the C9 Env
    Type: String
    Default: true

Conditions:
  AssignOwnerArn: !Equals [!Ref SpecifyC9Owner, true]

Resources:
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: STG309WorkshopInstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  RolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: STG309InstancePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:CreateFunction'
              - 'lambda:TagResource'
              - 'iam:ListRoleTags'
              - 'iam:ListServerCertificates'
              - 'iam:CreateRole'
              - 'lambda:GetFunctionConfiguration'
              - 'iam:AttachRolePolicy'
              - 'iam:ListServiceSpecificCredentials'
              - 'iam:PutRolePolicy'
              - 'iam:ListSigningCertificates'
              - 'iam:ListVirtualMFADevices'
              - 'iam:ListSSHPublicKeys'
              - 'iam:ListAttachedRolePolicies'
              - 'lambda:ListLayerVersions'
              - 'lambda:ListLayers'
              - 'lambda:DeleteFunction'
              - 'lambda:GetAlias'
              - 'iam:ListRolePolicies'
              - 'iam:ListPolicies'
              - 'iam:GetRole'
              - 'lambda:ListFunctions'
              - 'iam:ListSAMLProviders'
              - 'iam:GetPolicy'
              - 'lambda:GetEventSourceMapping'
              - 'apigateway:*'
              - 'lambda:ListAliases'
              - 'iam:ListEntitiesForPolicy'
              - 'iam:AttachUserPolicy'
              - 'iam:DeleteRole'
              - 'lambda:AddLayerVersionPermission'
              - 'lambda:UpdateAlias'
              - 'lambda:UpdateFunctionCode'
              - 'iam:ListGroupsForUser'
              - 'lambda:ListEventSourceMappings'
              - 'lambda:PublishVersion'
              - 'lambda:CreateAlias'
              - 'iam:GetAccountSummary'
              - 'lambda:ListVersionsByFunction'
              - 'lambda:GetLayerVersion'
              - 'iam:ListPoliciesGrantingServiceAccess'
              - 'iam:DeletePolicy'
              - 'lambda:GetAccountSettings'
              - 'iam:ListMFADevices'
              - 'lambda:GetLayerVersionPolicy'
              - 'lambda:UntagResource'
              - 'lambda:PutFunctionConcurrency'
              - 'iam:ListInstanceProfilesForRole'
              - 'iam:PassRole'
              - 'lambda:ListTags'
              - 'iam:DeleteRolePolicy'
              - 'lambda:DeleteLayerVersion'
              - 'iam:ListAttachedUserPolicies'
              - 'iam:ListAttachedGroupPolicies'
              - 'iam:ListAccessKeys'
              - 'lambda:UpdateEventSourceMapping'
              - 'lambda:GetFunction'
              - 'iam:ListGroupPolicies'
              - 'lambda:UpdateFunctionConfiguration'
              - 'iam:ListRoles'
              - 'iam:ListUserPolicies'
              - 'iam:ListInstanceProfiles'
              - 'iam:CreatePolicy'
              - 'lambda:AddPermission'
              - 'iam:ListPolicyVersions'
              - 'iam:ListOpenIDConnectProviders'
              - 'iam:PutUserPolicy'
              - 'iam:ListAccountAliases'
              - 'iam:ListUsers'
              - 'iam:UpdateRole'
              - 'lambda:DeleteFunctionConcurrency'
              - 'iam:ListGroups'
              - 'lambda:GetPolicy'
              - 'iam:GetLoginProfile'
              - 'iam:DeletePolicyVersion'
              - 'iam:ListUserTags'
              - 'elasticfilesystem:*'
              - 'ec2:*'
              - 'cloudformation:DescribeStacks'
            Resource: '*'
      Roles:
        - Ref: RootRole
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: STG309WorkshopInstanceProfile
      Path: /
      Roles:
        - Ref: RootRole
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: STG309 VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: STG309 IGW
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    DependsOn: VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2a
      CidrBlock: 10.192.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: STG309 Public Subnet 1
  PublicSubnet2:
    DependsOn: VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2b
      CidrBlock: 10.192.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: STG309 Public Subnet 2
  PublicSubnet3:
    DependsOn: VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2c
      CidrBlock: 10.192.12.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: STG309 Public Subnet 3
  PublicSubnet4:
    DependsOn: VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2d
      CidrBlock: 10.192.13.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: STG309 Public Subnet 4
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: STG309 Public Routes
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PublicSubnet4RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet4
  C9IDE:
    Type: 'AWS::Cloud9::EnvironmentEC2'
    DependsOn: PublicSubnet1RouteTableAssociation
    Properties:
      Name: STG309-Workshop
      Description: C9 IDE for STG309 Workshop
      OwnerArn: !If [AssignOwnerArn, !Sub "arn:aws:iam::${AWS::AccountId}:assumed-role/TeamRole/MasterKey", !Ref "AWS::NoValue"]
      Repositories:
         - PathComponent: /stg309-workshop
           RepositoryUrl: https://github.com/brandold/serverless-object-detection.git
      AutomaticStopTimeMinutes: 60
      SubnetId: !Ref PublicSubnet1
      InstanceType: t2.small

  EFSSecGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: STG309Access
      GroupName: STG309
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt VPC.CidrBlock
      - IpProtocol: udp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt VPC.CidrBlock
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  EFSFileSystem:
    Type: AWS::EFS::FileSystem

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt EFSSecGroup.GroupId
      SubnetId: !Ref PublicSubnet1

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt EFSSecGroup.GroupId
      SubnetId: !Ref PublicSubnet2

  EFSMountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt EFSSecGroup.GroupId
      SubnetId: !Ref PublicSubnet3

  EFSMountTarget4:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt EFSSecGroup.GroupId
      SubnetId: !Ref PublicSubnet4

  ManagedAccessPoint:
    Type: AWS::EFS::AccessPoint
    DependsOn:
      - EFSMountTarget1
      - EFSMountTarget2
      - EFSMountTarget3
      - EFSMountTarget4
    Properties:
      FileSystemId: !Ref EFSFileSystem
      PosixUser:
        Gid: 1000
        Uid: 1000
      RootDirectory:
        CreationInfo:
          OwnerGid: 1000
          OwnerUid: 1000
          Permissions: 777
        Path: /efs

Outputs:
  EFSFileSystemId:
    Description: EFS Filesystem ID
    Value: !Ref EFSFileSystem
    Export:
      Name: FilesystemID
  EFSAccessPoint:
    Description: EFS Access Point ID
    Value: !Ref ManagedAccessPoint
    Export:
      Name: AccessPointID
